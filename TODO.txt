XLIFF to HTML converter

Current/next: itsxlf:domains needs to produce a domainRule with a domainPointer

Basic Outline:

    ✓-start with a fork of XML2HTML.
    -Mostly keep the code that processes rules, but add a new index that allows lookup by matched element to facilitate ITS info comparison for label application later on.
    -Completely change out the code for processing individual elements. Convert XLIFF ITS to HTML5 ITS. This will require checking attributes and child elements, and besides creating attributes sometimes creating new global rules (external resource and domain are global-only outside of XLIFF).
        ✓- translate
            ✓- translate att
            ✓- mtype value of 'protected' or 'x-its-translate-yes'
        ✓- localization note
            ✓- <note>, taking into account 'annotates' attribute value
            ✓- comment and itsxlf:locNoteType
        ✓- terminology
            ✓- mtype value of 'term' or 'x-its-term-no'
            ✓- itsxlf:termInfoRef
            ✓- itsxlf:termConfidence
        ✓- directionality
        ✓- language information
        - withinText
            - trans-unit=no: just make trans-unit a div
            - inline els=yes: just make these spans
            ✓- sub: explicitly set its-within-text to 'yes'
        ✓- domain
            ✓- create global rule for each instance
        ✓- text analysis
        ✓- locale filter
        ✓- provenance
        ✓- external resource
        ✓- target pointer
            ✓- create rule to match all targets with all sources
        ✓- id value
        ✓- preserve space
        ✓- localization quality issue
        ✓- localization quality issue rating
        - MT confidence
        - allowed characters
        - storage size
    ✓-Delete other attributes (instead of making them into futures)
    ✓-no more handling of <its:span>
    ✓-no more global rule to set withinText=no for created <span>'s (withinText value will be set explicitly where it matters)
    -rename <source> and <target> to <p>, inline elements to <span>, and everything else to <div>.
    -small CSS to hide everything but <p>.
    -After <source> and <target> elements are processed, their ITS information will be compared to each other, and an appropriate label applied in the form of another <p> element inside the converted <trans-unit>. Comparing after conversion like this will make it easier to change to the split/recombine strategy later.
    -Create global rules to reset ITS defaults on labeling elements, and also add a global rule to match sources with targets (targetPointerRule).


Engineering Tasks:
    - do some HTML post-processing to fine-tune tests:
        - convert_local.t shouldn't have to also check that default global rules to prevent inheritance have been added
        - should be able to check XML equality of script elements instead of text equality
    - Test::HTML::Differences is not very good. Would like a module that handles HTML5, properly normalizes all of it and then takes a diff. Even better would be a structural test instead of line-by-line comparison. Also, need to be able to tell it how to compare contents of <script> elements, which tend to vary in non-semantic whitespace, causing test failures.

To Do on current task:

Later To Do:
    - change the way xpaths are generated for comments, text, etc.; XML::LibXML sometimes gives a path with asterisks, sometimes gives one with element names. This makes testing fragile.
    - pass ITS object to converter, instead of data
        - better dependency injection will make it more flexible
    - find possible code reuse in converter
