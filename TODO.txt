<<<<<<< HEAD
##TODO notes for the ITS/WICS packages:

###General TODOs:
    * check test coverage and fill it in!
    * Reformat with perltidy
        * but then we would lose the utility of `git blame`!
    * test on platforms besides Windows 7
        * just release on CPAN and that's taken care of...

###ITS

    * submit pull request to XML::LibXML to add unique_key method to Namespace class, then use it in ITS::DOM::Node.
    * use Log::Any
    * Implement ITS inheritance
    * Create a way to specify elements that are inline (INI file? constructor args?)
        - currently the ITS::DOM::Element::is_inline method just checks for a newline before and after.
    * Fix TODO tests (simulate a namespace unregister by reregistering it as '_ITS_UNREGISTERED' or something).

###ITS-WICS-XML2HTML and ITS-WICS-XLIFF2HTML
    * do some HTML post-processing to fine-tune tests:
        - Tests for local conversion shouldn't have to also check that default global rules to prevent inheritance have been added
        - should be able to check XML equality of script elements instead of text equality
    * Test::HTML::Differences is not very good. Would like a module that handles HTML5, properly normalizes all of it and then takes a diff. Even better would be a structural test instead of line-by-line comparison. Also, need to be able to tell it how to compare contents of <script> elements, which tend to vary in non-semantic whitespace, causing test failures.
        * Maybe HTML::HTML5::Parser + Test::XML::Ordered (after some bugs are resolved there)?
    * change the way xpaths are generated for comments, text, etc.; XML::LibXML sometimes gives a path with asterisks, sometimes gives one with element names. This makes testing fragile.

###ITS-WICS-XLIFF2HTML

###ITS-WICS-XML2XLIFF
This thing only converts a single sample file provided for the WICS project. There's plenty more work to do:

    * Implement conversion for all of the other metadata categories
    * handle its:span (non-namespaced ITS atts)
    * Implement inheritance in the ITS module and then also transfer inherited ITS to XLIFF trans-units
    * Use withinTextRule to help delineate trans-units in ITS segmentation scheme
    * Put elements matched by targetPointerRule in the same trans-unit, using ITS on the source to annotate the trans-unit where applicable
    * Put its:annotatorsRef somewhere useful
    * Extract translatable attributes
        * how to treat ones marked with withinText=yes?
    * In the custom segmentation scheme, only put inline untranslatable elements in <ph> tags. Use <bpt> and <ept> for inline translatable ones.
    - use Test::XML::Ordered instead of Test::XML, after proper comparison of other types of nodes are added to that distribution.
        - See RT #89262, 89263, 89264
        - this way we only have to install one XML processor (XML::LibXML)

The test which validates the conversion of the files in the ITS 2.0 test suite still has several failures in it, due to the state of flux of the XLIFF ITS mapping. See [here](https://github.com/w3c/its-2.0-testsuite/issues/2) for more details.

###ITS-WICS-Reduce
* Maybe someday support reducing XML instead of only HTML.

###ITS-WICS

* Write some tests (!)
* Put WICS-GUI and WICS in the same script so that we can make just one executable.
* rewrite GUI in XRC for better organization
* make the applications more localizable (po/mo files, share/locale directory, etc.)
* make 'WICS-GUI.pl' and 'WICS.pl' into links in WICS.pm (don't know how to link them properly)
* Add a checkbox to indicate if it's okay to overwrite files
* Add a way to specify group and trans-unit elements for XML2XLIFF
* Sometimes fonts change in the display box. Figure out the whole RTF thing and maybe do some escaping so that everything stays consistent.
* Real icons instead of colored boxes would be less cheesy.
* It would be useful to be able to add and remove files from a list for conversion, instead of just selecting all of the files for processing at once.
* Somewhere along the way, someone might look for a help button in WICS-GUI and they will find nothing.
