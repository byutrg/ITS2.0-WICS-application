# Use Pod::Simple::HTMLBatch and Pod::Weaver to generate
# HTML documentation from the source. This is pretty messy;
# follow http://stackoverflow.com/questions/19461000/preprocess-pod-with-podweaver-before-using-podsimplehtml/19506206
# for updates
use strict;
use warnings;

# package to preprocess each discovered file with Pod::Weaver
package Wics::Pod;
use Pod::Weaver;
use Pod::Elemental;
use Software::License::MIT;
use PPI;
use List::MoreUtils qw(any);
use parent qw(Pod::Simple::HTML);

my $weaver = Pod::Weaver->new_with_default_config;
my $license = Software::License::MIT->new({
  holder => 'DFKI',
});

sub parse_file {
    my ($self, $in_file) = @_;

    my $doc = get_doc($in_file);

    my $document = $weaver->weave_document({
        pod_document => $doc->{pod},
        ppi_document => $doc->{ppi},
        authors => ['Nathan Glenn <garfieldnate@gmail.com>'],
        license => $license,
    });

    return $self->SUPER::parse_string_document($document->as_pod_string);
}

#return {ppi, pod}
#Most of this taken from Pod::Elemental::PerlMunger
sub get_doc {
    my ($file_name) = @_;

    my $ppi_document = PPI::Document->new($file_name);
    confess(PPI::Document->errstr) unless $ppi_document;

    my @pod_tokens = map {"$_"} @{ $ppi_document->find('PPI::Token::Pod') || [] };
    $ppi_document->prune('PPI::Token::Pod');

    my $finder = sub {
        my $node = $_[1];
        return 0 unless any { $node->isa($_) }
           qw( PPI::Token::Quote PPI::Token::QuoteLike PPI::Token::HereDoc );
        return 1 if $node->content =~ /^=[a-z]/m;
        return 0;
    };

    if ($ppi_document->find_first($finder)) {
       warn "can't get POD from $file_name: there is POD inside string literals";
    }

    my $pod_str = join "\n", @pod_tokens;
    my $pod_document = Pod::Elemental->read_string($pod_str);

    return {ppi => $ppi_document, pod => $pod_document};
}

# search package to tell Pod::Simple::HTMLBatch that everything has POD
package Wics::Pod::Search;
use parent qw(Pod::Simple::Search);

# override this method to allow whatever kinds of POD commands (=method, etc.)
# mostly copied from Pod::Simple::Search
sub contains_pod {
    my($self, $file) = @_;
    my $verbose = $self->{'verbose'};

    # check for one line of POD
    $verbose > 1 and print " Scanning $file for pod...\n";
    unless( open(MAYBEPOD,"<$file") ) {
        print "Error: $file is unreadable: $!\n";
        return undef;
    }


    local $_;
    while( <MAYBEPOD> ) {
        # a more forgiving pod regex for things like =method
        if(m/^=(.+)\b/s) {
          close(MAYBEPOD) || die "Bizarre error closing $file: $!\nAborting";
          chomp;
          $verbose > 1 and print "  Found some pod ($_) in $file\n";
          return 1;
        }
    }
    close(MAYBEPOD) || die "Bizarre error closing $file: $!\nAborting";
    $verbose > 1 and print "  No POD in $file, skipping.\n";
    return 0;
}

package main;
use Pod::Simple::HTMLBatch;
use FindBin qw($Bin);
use Path::Tiny;
use File::Copy;

my $cwd = path($Bin);
my $proj = $cwd->parent;
#lib and bin contain code with embedded POD
my $lib = path($proj, 'lib');
my $bin = path($proj, 'bin');
my $docs = path($proj, 'docs');

#output in docs/html
my $out = path($docs, 'html');
# make sure output directory is clean
if($out->is_dir){
    $out->remove_tree;
}
$out->mkpath;

my $batchconv = Pod::Simple::HTMLBatch->new;

# prevent printing date/time/versions in every document header
{
    no warnings 'redefine';
    *Pod::Simple::HTML::version_tag_comment = sub {
        return "<!--Generated by Pod::Simple::HTML. Do not modify.-->\n";
    };
}
# prevent printing date/time/versions in every document footer
$batchconv->contents_page_end(
    "\n\n<p class='footer'>Generated by Pod::Simple::HTMLBatch.</p>" .
    "\n\n</body></html>\n"
);
# use same style as on CPAN
$batchconv->add_css( 'cpanStyle.css', 1, 'cpanStyle');

#use the custom class to preprocess with Pod::Weaver
$batchconv->html_render_class('Wics::Pod');
$batchconv->search_class('Wics::Pod::Search');
$batchconv->batch_convert( ["$lib", "$bin", $docs], $out );

#copy the cpanStyle css and the WICS-GUI image into the output directory
my @files = qw(
    cpanStyle.css
    WICS-GUI.png
    WICS-GUI-choose-file.png
    WICS-GUI-logs.png
    WICS-browser.png
);

for my $file (@files){
    copy(path($docs, $file), path($out, $file));
}
