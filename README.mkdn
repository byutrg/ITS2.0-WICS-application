# NAME

XML::ITS - Work with ITS-decorated XML

# VERSION

version 0.03

# SYNOPSIS

    use XML::ITS;
    my $ITS = XML::ITS->new(file => 'myITSfile.xml');
    my $rules = $ITS->get_rules;
    $ITS->iterate_matches(sub{
        my ($rule, $matches) = @_;
        # do something with matches here
    });

# DESCRIPTION

This module is for working with ITS decorated XML or HTML documents.
It allows you to resolve all of the global and find matches for each
of them.

# EXPORTS

The following function may be exported:

## `its_ns`

Returns the ITS namespace URI.

# METHODS

## `new`

Returns an ITS object instance.
Arguments: The first is either 'xml' or 'html' to indicate the type of
document being parsed. After that, you must specify 'doc' and
may also specify 'rules' parameters. The value of these parameters
should be either a string containing a file path or a string reference
containing actual ITS data. The 'document' argument should point to the
document to which ITS data is being applied, and the 'rules' argument
should point to the document containing the ITS rules to apply.

## `get_doc`

Returns the XML::ITS::DOM object created from the input
document.

## `get_rules`

Returns an arrayref containing the ITS rule elements
(in the form of XML::ITS::Rule objects) which are to be
applied to the document, in the order in which they will
be applied. The returned arrayref is the one used to store
rules internally, making it possible to add, remove, or
rearrange them.

Keep in mind that, while it is useful to be able to edit these
rules, there isn't much in the way of validity checking
for them, so you must be careful in what you do to them.

## `iterate_matches`

Iterates over each match of each document rule, in order of
application.

The first argument is a subroutine reference to be called for each
match. The arguments to the subroutine are first the matching rule and
then a hash reference representing the hash object (see `get_matches`
below).

The second argument is optionally an array ref of rules to find matches
for (no argument uses internal rules).

## `get_matches`

Argument: `ITS::Rule` object.

Returns an array ref of matches on this ITS document against the input
rule. Each element of the list is a hash ref containing at least one
key, `selector`, whose value is the document node which the rule
selector matched.
Any other keys are names of pointer attributes, and their values are
their matched document nodes.

## `filter_rules`

This method takes one argument: a subroutine which should return a boolean
value. This method loops through all of the ITS rules associated with this
document, calls the input subroutine with the rule as an argument, and removes
the rule from the document if the subroutine does not return a true value. For
example, the following can be used to remove all `preserveSpace` rules from
the document:

    $ITS->filter_rules(sub {
      return $_[0]->type ne 'preserveSpace';
    });

# TODO

ITS allows for other types of selectors. This module, however,
only allows XPath selectors. CSS selectors could be implemented,
for example, with `HTML::Selector::XPath`.

Currently this module does not check ITS version. All rules
are assumed to be ITS version 2.0.

# AUTHOR

Nathan Glenn <garfieldnate@gmail.com>

# COPYRIGHT AND LICENSE

This software is copyright (c) 2013 by DFKI.  No
license is granted to other entities.
