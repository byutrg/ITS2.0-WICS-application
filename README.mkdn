# NAME

XML::ITS - Work with ITS-decorated XML

# VERSION

version 0.01

# SYNOPSIS

    use XML::ITS;
    my $ITS = XML::ITS->new(file => 'myITSfile.xml');
    my $rules = $ITS->get_rules;
    $ITS->iterate_matches(sub{
        my ($rule, $matches) = @_;
        # do something with matches here
    });

# DESCRIPTION

This module is for working with ITS decorated XML or HTML documents.
It allows you to resolve all of the global and find matches for each
of them.

# METHODS

## `new`

Returns an ITS object instance.
Arguments: The first is either 'xml' or 'html' to indicate the type of
document being parsed. After that, you must specify 'doc' and
may also specify 'rules' parameters. The value of these parameters
should be either a string containing a file path or a string reference
containing actual ITS data. The 'document' argument should point to the
document to which ITS data is being applied, and the 'rules' argument
should point to the document containing the ITS rules to apply.

## `get_doc`

Returns the XML::ITS::DOM object created from the input
document.

## `get_rules`

Returns an arrayref containing the ITS rule elements
(in the form of XML::ITS::Rule objects) which are to be
applied to the document, in the order in which they will
be applied.

Keep in mind that, while it is useful to be able to edit these
rules, there isn't much in the way of validity checking
for them, so you must be careful in what you do to them.

## `iterate_matches`

Iterates over each match of each document rule, in order of
application.

The first argument is a subroutine reference to be called for each
match. The arguments to the subroutine are first the matching rule and
then a hash reference representing the hash object (see `get_matches`
below).

The second argument is optionally an array ref of rules to find matches
for (no argument uses internal rules).

## `get_matches`

Argument: `ITS::Rule` object.

Returns an array ref of matches on this ITS document against the input
rule. Each element of the list is a hash ref containing at least one
key, `selector`, whose value is the document node which the rule
selector matched.
Any other keys are names of pointer attributes, and their values are
their matched document nodes.

# AUTHOR

Nathan Glenn <garfieldnate@gmail.com>

# COPYRIGHT AND LICENSE

This software is copyright (c) 2013 by LOGRUS.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
