# NAME

ITS::XML2XLIFF - Extract ITS-decorated XML into XLIFF

# VERSION

version 0.02

# SYNOPSIS

    use ITS;
    use ITS::XML2XLIFF;
    my $converter = ITS::XML2XLIFF->new('Page Title');
    my $ITS = ITS->new('xml', doc => \'<xml>some text</xml>');
    my $result = $converter->convert($ITS);
    print $$result;

# DESCRIPTION

This module extracts strings from an XML file to create an XLIFF file,
keeping the original ITS information intact.

# CAVEATS

This module is very preliminary, and there are plenty of things to
implement still. Only a few ITS data categories are converted, and no
inherited ITS information is saved.

# SEE ALSO

This module relies on the [ITS](http://search.cpan.org/perldoc?ITS) module for processing ITS markup and rules.

The ITS 2.0 specification for XML and HTML5: [http://www.w3.org/TR/its20/](http://www.w3.org/TR/its20/).

The spec for representing ITS in XLIFF:
[http://www.w3.org/International/its/wiki/XLIFF\_1.2\_Mapping](http://www.w3.org/International/its/wiki/XLIFF\_1.2\_Mapping).

ITS interest group mail archives:
[http://lists.w3.org/Archives/Public/public-i18n-its-ig/](http://lists.w3.org/Archives/Public/public-i18n-its-ig/)

# METHODS

## `new`

Creates a new converter instance.

## `convert`

Extracts strings from the input ITS object containing an XML document
into an XLIFF document, preserving ITS information.

Return value is a string pointer containing the output XLIFF string.

There are two segmentation schemes: the default behavior is to extract
all strings in the document, using ITS `withinText` values (currently
only implemented with local markup) to decide which elements are inline
or structural.

You may also passing `tu` and `group` parameters after the ITS document
to get a different segmentation behavior. Each parameter should be an
array ref containing names of elements to be used for extracting
`trans-unit`s and `group`s, repsectively. Children of `trans-unit`s are
placed inline. If no `group` element names are specified, then `trans-units`
for the whole document are placed in one `group`.

For example, the following will extract `para` elements and their children
as `trans-units`, and place them in groups with other `trans-units` extracted
from the same `sec` elements:

	my $xliff = $XML2XLIFF->convert($ITS, group => ['sec'], tu => ['para']);

# AUTHOR

Nathan Glenn <garfieldnate@gmail.com>

# COPYRIGHT AND LICENSE

This software is copyright (c) 2013 by DFKI.  No
license is granted to other entities.
